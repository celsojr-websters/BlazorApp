@page "/"
@using Bogus
@using System.IO.Compression
@using System.Text.Json
@inject NavigationService NavService
@inject IJSRuntime JS
@inject HttpClient HttpClient

<button @onclick=GenerateData>Generate Data</button>

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.


<strong>Table of Contents</strong>
<ul>
    @for (int i = 0; i < 10; i++)
    {
        <li><a href="@NavService.GetHref(GetId(i))">Header @i</a></li>
    }
</ul>

@for (int i = 0; i < 10; i++)
{
    <h1 id="@GetId(i)">Header @i</h1>
    @LoremNET.Lorem.Paragraph(wordCount: 30, sentenceCount: 10)
}

@code {
    string GetId(int i) => "header-" + i;

    async Task SaveTextFile()
    {
        var content = "This is a test file.";
        await JS.InvokeVoidAsync("fileSystemAccess.saveTextFile", content, "test.txt");
    }

    async Task GenerateData()
    {
        var data = GenerateCustomerDataAsync(10);
        var compressedData = await CompressDataAsync(data);

        await JS.InvokeVoidAsync("fileSystemAccess.saveFile", compressedData, "customers.json.gz");

        Console.WriteLine("Data generated!");
    }

    private static async Task<byte[]> SerializeDataAsync<T>(IAsyncEnumerable<T> data)
    {
        using var memoryStream = new MemoryStream();
        await JsonSerializer.SerializeAsync(memoryStream, data);
        return memoryStream.ToArray();
    }

    private static async Task<byte[]> CompressDataAsync<T>(IAsyncEnumerable<T> data)
    {
        using var memoryStream = new MemoryStream();
        await using var gzipStream = new GZipStream(memoryStream, CompressionLevel.Fastest, leaveOpen: true);
        await JsonSerializer.SerializeAsync(gzipStream, data);
        gzipStream.Close(); // Finish compression
    
        return memoryStream.ToArray();
    }

    private static async IAsyncEnumerable<Customer> GenerateCustomerDataAsync(int count)
    {
        var faker = new Faker<Customer>()
            .RuleFor(c => c.Name, f => f.Name.FullName())
            .RuleFor(c => c.Birthday, f => f.Date.Past(80, DateTime.Today.AddYears(-18))) // Age between 18 and 98
            .RuleFor(c => c.State, f => f.Address.StateAbbr())
            .RuleFor(c => c.AnnualIncome, f => f.Random.Int(20_000, 200_000)); // Income between $20k and $200k

        for (int i = 0; i < count; i++)
        {
            yield return faker.Generate();
            await Task.Yield(); // Yield control to allow streaming
        }
    }
}
